#!/bin/bash

# BIG-IP ONBOARD SCRIPT
# azurerm will copy this to /var/lib/waagent/CustomData and execute
# source wait_bigip_ready* functions
source /usr/lib/bigstart/bigip-ready-functions

DEBUG=0

### Variables
admin_user='${admin_user}'
admin_password='${admin_password}'
CREDS="${admin_user}:${admin_password}"
cfg_dir='${CFG_DIR}'
uai_mgmt_headers="$cfg_dir/uai_mgmt_headers.txt"
uai_storage_headers="$cfg_dir/uai_storage_headers.txt"
cloud_init_log=${cloud_init_log}
rpms_dir="$cfg_dir/rpms"

use_bigiq_license=${use_bigiq_license}
blob_path='${blob_path}'
DO_FN='${DO_FN}'
AS3_FN='${AS3_FN}'
TS_FN='${TS_FN}'

# DO variables
doUrl="mgmt/shared/declarative-onboarding"
doInfoUrl="mgmt/shared/declarative-onboarding/info"
doTaskUrl="mgmt/shared/declarative-onboarding/task"

# AS3 variables
as3Url="mgmt/shared/appsvcs/declare"
as3InfoUrl="mgmt/shared/appsvcs/info"
as3TaskUrl="mgmt/shared/appsvcs/task"

# TS variables
tsUrl="mgmt/shared/telemetry/declare"
tsInfoUrl="mgmt/shared/telemetry/info"
tsTaskUrl="mgmt/shared/telemetry/task"

iAppInstallUrl="http://localhost:8100/mgmt/shared/iapp/package-management-tasks"
metadataUrl="http://169.254.169.254/metadata/instance?api-version=2021-02-01"


do_config_b64='${DO_conf}'
as3_config_b64='${AS3_conf}'
ts_config_b64='${TS_conf}'
ltm_config_b64='${ltm_config_b64}'
ltm_cfg_file='${ltm_cfg_file}'
lic_update_b64='${license_update}'
update_license_b64='${systemd_licensing}'

do_cfg="$cfg_dir/do_cfg.json"
ts_cfg="$cfg_dir/ts_cfg.json"
as3_cfg="$cfg_dir/as3_cfg.json"
ltm_cfg="$cfg_dir/ltm_cfg.conf"
lic_update="$cfg_dir/f5_update_license.bash"
update_license="$cfg_dir/f5_update_license.service"
## /Variables

# Terraform template work-around
http_code=$(echo "% {http_code}" | sed 's/ //')

###
### Functions
# Wait up to five minutes for VE to become active
# This is necessary following reprovisioning, and none of the
# wait_bigip_ready* functions actually wait for active
wait_bigip_active() {
  status_file=/var/prompt/ps1
  for (( c=0; c < 60; c++ )); do
    test -f $status_file && { ve_status=$(cat $status_file); }
    if [[ $ve_status == "Active" ]]; then
      echo "$(date +%T): BIG-IP Active"
      return
    fi
    sleep 5
  done

  # If we reach this point the system hasn't become active
  echo "$(date +%T) ERROR: BIG-IP has failed to become actie after five minutes"
  echo "$(date +%T) $status_file: $(cat $status_file)"
}

# Get our API authorization tokens and write the auth headers to the appropriate headers file
get_mgmt_auth_header() {
  echo "$(date +%T) Getting management authentication token"
  tokenUrl="http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=https://management.azure.com/"
  token=$(curl -0s -H "Metadata:true" $tokenUrl | jq -r ".access_token")
  echo "x-ms-version: 2017-11-09" > $uai_mgmt_headers
  echo "Authorization: Bearer $token" >> $uai_mgmt_headers
}

get_storage_auth_header() {
  echo "$(date +%T) Getting storage authentication token"
  tokenUrl="http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=https://storage.azure.com/"
  token=$(curl -0s -H "Metadata:true" $tokenUrl | jq -r ".access_token")
  echo "x-ms-version: 2017-11-09" > $uai_storage_headers
  echo "Authorization: Bearer $token" >> $uai_storage_headers
}


## Get Azure-assigned data-plane IP address from metadata
get_self_ip() {
  # Get data-plane NIC mac-address
  # looping this because sometimes it is called too soon and the MAC isn't available
  echo "$(date +%T) Getting data-plane MAC address"
  while [[ true ]]; do
    ((count++))
    dataNicMac=$(tmsh show net interface 1.1 all-properties | awk '/uninit/ { print toupper($3) }' | sed 's/://g')
    if [[ -n $dataNicMac && ! $dataNicMac =~ "NONE" ]]; then break; fi
    if (( count > 30 )); then
      echo "$(date +%T) Failed to find data nic mac address."
      dataNicMacErr=1
      break
    fi
    sleep 2
  done

  # Failure to get the NIC MAC is unrecoverable
  if [[ $dataNicMacErr ]]; then
    echo "$(date +%T) ERROR: Failed to get data-plane mac address"
    tmsh show net interfaces all-properties >> $cfg_dir/$cloud_init_log
    exit 1
  fi
  echo "$(date +%T) Found data-plane mac address: $dataNicMac"

  # filter assigned addresses by data-plane mac
  jqAddrFilter=".network.interface[] | select(.macAddress == \"$dataNicMac\") | .ipv4.ipAddress[0].privateIpAddress"
  jqMaskFilter=".network.interface[] | select(.macAddress == \"$dataNicMac\") | .ipv4.subnet[0].prefix"

  IP_HOSTNAME_FOUND=0
  echo "$(date +%T) Getting Azure IP address for MAC address '$dataNicMac'"
  for (( c=0; c < 30; c++ )); do
    self_ip=$(curl -sH Metadata:true $metadataUrl | jq -r "$jqAddrFilter")
    netmask=$(curl -sH Metadata:true $metadataUrl | jq -r "$jqMaskFilter")
    host=$(curl -sH Metadata:true $metadataUrl | jq -r .compute.osProfile.computerName)

    if [[ -n $self_ip && -n $netmask && -n $host ]]; then
      IP_HOSTNAME_FOUND=1
      break
    else
      sleep 5
    fi
  done

  # Unrecoverable error in retrieving IP and host information - redeploying instance
  if [[ $IP_HOSTNAME_FOUND == 0 ]]; then
    echo "$(date +%T) CRITICAL ERROR: Failed to determine IP address or hostname. Redeploying instance."
    echo "$(date +%T) self_ip: '$self_ip', netmask: '$netmask', host: '$host'"

    # Build the URI to redeploy the instance through the Azure REST API
    uri="management.azure.com/subscriptions/$subscription_id"
    uri="$uri/resourceGroups/$resource_group/providers/Microsoft.Compute"
    uri="$uri/virtualMachineScaleSets/$vm_scale_set"
    uri="$uri/virtualMachines/$instance_id"
    uri="$uri/redeploy"
    uri="$uri?api-version=2021-07-01"
  
    echo "$(date +%T) Redeploying VM instance"
    echo "$(data +%T) curl -sH \"$(cat $uai_mgmt_headers)\" -X POST 'https://$uri' -d \"\""
    curl -H "$(cat $uai_mgmt_headers)" -X POST "https://$uri" -d "" | jq .
  fi

  echo "$(date +%T) Found self-ip: $self_ip/$netmask"
  echo "$(date +%T) Found hostname: $host"
}


# Retrieve bigip.conf
get_bigip_config() {
  location_pattern="^https?://"
  if [[ $ltm_cfg_file =~ $location_pattern ]]; then
    # file is a URI; not using blob storage
    echo "$(date +%T) Retrieving bigip.conf from $ltm_cfg_file"
    curl -s -H "$(cat $uai_storage_headers)" $storage_url/$container/$ltm_cfg_file -o $ltm_cfg
  else
    # file is not a URI; assuming blob storage should be used
    # Azure seems to have an issue if this is sent too early in the boot or deployemnet sequence
    # so we're going to try to retrieve the file a few times
    echo "$(date +%T) Retrieving bigip.conf from  $blob_path/$ltm_cfg_file"
    echo "$(date +%T) curl -sH \"\$(cat $uai_storage_headers)\" $blob_path/$ltm_cfg_file -o $ltm_cfg -w $http_code"
  
    for (( c=0; c < 20; c++ )); do
      status=$(curl -sH "$(cat $uai_storage_headers)" $blob_path/$ltm_cfg_file -o $ltm_cfg -w $http_code)
      if [[ $status == 200 ]]; then
        echo "$(date +%T) Initial bigip.conf retrieved successfully"
        break
      else
        echo "$(date +%T) Failed to retrieve initial bigip.conf (status: $status, attempt #: $c)"
        sleep 5
      fi
    done
  fi
}


### Download iAppLX packages
get_iapp_pkgs() {
  for pkg in $AS3_FN $DO_FN $TS_FN; do
    if [[ $pkg =~ $location_pattern ]]; then
      # Not using blob storage
      file=$(basename $pkg)
      if [[ -f $rpms_dir/$file ]]; then
        echo "$(date +%T) File $rpms_dir/$file already present - skipping download"
        continue
      fi
      echo "$(date +%T) Downloading: $file"
      echo $(date +%T) curl -Ls $pkg -o $rpms_dir/$file
      curl -Ls $pkg -o $rpms_dir/$file 2>/$cfg_dir/curl_$${file}.log
      curl -Ls $pkg.sha256 -o $rpms_dir/$file.sha256 2>>/$cfg_dir/curl_$${file}.log
  
      # Verify checksum of downloaded file 
      shaCalc=$(shasum -a 256 $rpms_dir/$file | awk '{print $1}')
      shaRead=$(cat $rpms_dir/$file.sha256 | awk '{print $1}')
      if [[ $shaCalc != $shaRead ]]; then
        echo "$(date +%T) ERROR: Calculated checksum ($shaCalc) does not match downloaded checksum ($shaRead) for file $file"
        #rm $rpms_dir/$file
      else
        echo "$(date +%T) Checksums match for file $file"
        rm $cfg_dir/curl_$${file}.log $rpms_dir/$file.sha256
      fi
  
    else
      # Using blob storage
      echo -e "$(date +%T) Downloading $file"
      echo $(date +%T) curl -LsH "$(cat $uai_storage_headers)" $blob_path/$file -o $rpms_dir/$file
      curl -#vLH "$(cat $uai_storage_headers)" $blob_path/$file -o $rpms_dir/$file 2>$cfg_dir/curl_$${file}.log
      if [[ $? == 0 ]]; then rm $cfg_dir/curl_$${file}.log; fi
      # Not performing checksum comparison because files in BLOB are pre-staged and assumed safe
    fi
  done
}


# Create config files (json and conf) from base64
mk_iapp_json() {
  # Declarative Onboarding
  if [[ -n $do_config_b64 ]]; then echo $do_config_b64 | base64 -d > $do_cfg; fi
  
  # Telemetry Streaming
  if [[ -n $ts_config_b64 ]]; then echo $ts_config_b64 | base64 -d > $ts_cfg; fi
  
  # AS3 config
  if [[ -n $as3_config_b64 ]]; then echo $as3_config_b64 | base64 -d > $as3_cfg; fi
}


# Install REST packages
install_iapp_pkgs() {
  # restart restnoded in preparation for installing rest packages
  tmsh restart sys service restnoded
  sleep 15
  
  for pkg in $AS3_FN $DO_FN $TS_FN; do
    file=$(basename $pkg)
    if [[ ! -f $rpms_dir/$file ]]; then
      echo "$(date +%T) $rpms_dir/$file not present, skipping package install"
      continue
    fi
    cp $rpms_dir/$file /var/config/rest/downloads
  
    echo "Install REST package: $file"
    service=$(echo $file | cut -d '-' -f 2)
    if [[ $service =~ "declarative" ]]; then service="declarative-onboarding"; fi
  
    DATA=$(printf '{"operation":"INSTALL","packageFilePath":"%s"}' /var/config/rest/downloads/$file)
    echo "$(date +%T) curl -su '$CREDS' -X POST $iAppInstallUrl -d '$DATA'"
    curl -su $CREDS -X POST $iAppInstallUrl -d $DATA -o $cfg_dir/$${service}_install.log
  
    for (( cnt=0; $cnt < 20; cnt++ )); do
      STATUS=$(curl -sku $CREDS -w "$http_code" https://localhost/mgmt/shared/$service/info -o /dev/null)
      if [[ $STATUS == 200 ]]; then
        pkgStatus=1
        rm /var/config/rest/downloads/$file
        rm $cfg_dir/$${service}_install.log
        break
      else
        echo -e "$(date +%T) Status code: $STATUS package install in-progress ($file)"
      fi
      sleep 10
    done
  
    if [[ $pkgStatus == 1 ]]; then
      echo -e "$(date +%T) $service install completed"
    else
      echo -e "$(date +%T) $service package install FAILED"
    fi
  done
}


## restart restnoded
restart_rest() {
  tmsh restart sys service restnoded
  sleep 20
  
  echo "$(date +%T) Checking restnoded status"
  for (( CNT=0; $CNT < 60; CNT++)); do
    doStatus=$(curl -sku $CREDS https://localhost/$doInfoUrl | jq -r '.[].result.code' 2>$cfg_dir/do_check_error.log)
    if [[ $doStatus == 200 ]]; then
      echo "$(date +%T) DO available, proceeding"
      break
    else
      echo "$(date +%T) DO not available"
    fi
    sleep 3
  done
}


## POST DO and TS Declarations
submit_declarative_onboarding() {
  # restart restnoded before applying DO config
  restart_rest
  
  if [[ $doStatus == 200 ]]; then
    # Update self-ip in ltm config file
    echo "$(date +%T) Updating self-ip to $self_ip"
    sed -i  "s/__SELF_IP__/$self_ip/" $do_cfg
    sed -i  "s/__NETMASK__/$netmask/" $do_cfg
  
    # update DO config before posting
    echo "$(date +%T) Updating hostname to $host"
    sed -i  "s/__HOSTNAME__/$host.westus2.cloudapp.azure.com/" $do_cfg
  
    # Submit DO Declaration
    echo -e "$(date +%T) Submitting DO declaration"
    echo curl -sku $CREDS -X POST https://localhost/$doUrl -d @$do_cfg -o $cfg_dir/do_task_out.json
    curl -sku $CREDS -X POST https://localhost/$doUrl -d @$do_cfg -o $cfg_dir/do_task_out.json
    doTaskId=$(cat $cfg_dir/do_task_out.json | jq -r '.id')
    
    # Wait for the DO task to complete
    for (( CNT=0; $CNT < 30; CNT++ )); do
      RESP=$(curl -sku $CREDS https://localhost/$doTaskUrl/$doTaskId)
      CODE=$(echo $RESP | jq .result.code 2>/dev/null)
  
      # Make sure $CODE is populated before trying to check it
      if [[ -z $CODE ]]; then
        echo $RESP > $cfg_dir/doTaskStatus.json
        sleep 10
        continue
      fi
      if (( $${CODE:-0000} == 200 )); then
        echo "$(date +%T) DO task successful"
        test -f $cfg_dir/doTaskStatus.json && rm $cfg_dir/doTaskStatus.json
        break
      elif (( $${CODE:-0000} == 202 )); then
        echo -e "$(date +%T) DO task still in-progress"
      elif (( $${CODE:-0000} >= 400 )); then
        echo -e "$(date +%T) DO task still failed, code: $CODE"
        break
      else
        echo -e "$(date +%T) DO task status unknown (code $CODE)"
      fi
      sleep 10
    done
  
  else
    echo "$(date +%T) *** DO INSTALLATION FAILED ***"
  fi
}


# Submit TS Declaration
submit_telemetry_streaming() {
  echo "$(date +%T) Updating TS configuration with resource id: $resource_id"
  sed -i  's#__resource_id__#'"$resource_id"'#' $ts_cfg
  
  echo -e "$(date +%T) Submitting TS declaration"
  echo curl -sku '$CREDS' -H "Content-Type: Application/json" -X POST https://localhost/$tsUrl -d @$ts_cfg -o $cfg_dir/ts_status.json
  curl -sku $CREDS -H "Content-Type: Application/json" -X POST https://localhost/$tsUrl -d @$ts_cfg -o $cfg_dir/ts_status.json
  echo -e "$(date +%T) ===Telemetry Streaming configuration complete==="
}


# Only run AS3 task if AS3 has been provided
submit_as3() {
  echo "$(date +%T) Submitting AS3 declaration"
  echo $(date +%T) curl -sku '$CREDS' -H "Content-Type: Application/json" -X POST https://localhost/$as3Url -d @$as3_cfg
  curl -sku $CREDS -H "Content-Type: Application/json" -X POST https://localhost/$as3Url -d @$as3_cfg
}


## Check DO configuration status
check_do_status() {
  # We need to make sure the system is active and that DO config was successful before loading the LTM config.
  echo "$(date +%T) Waiting for bigip to become active"
  wait_bigip_active
  echo -e "$(date +%T) Ready to receive post-onboarding configuration\n"

  # Make sure the vlan is present. If not, the DO config hasn't actually finalized.
  vlans=$(tmsh list net vlan one-line 2>/dev/null | wc -l)
  if (( $vlans > 0 )); then
    return 0
  else
    return 1
  fi
}


# Write LTM config to file and merge it into the running configuration
load_ltm_config() {
  # If ltm config was provided as a location ($ltm_cfg_file) it should already be written to disk
  # If provided as a base64, decode and write to file
  if [[ -n $ltm_config_b64 && (($vlans > 0)) ]]; then echo $ltm_config_b64 | base64 -d > $ltm_cfg; fi
  
  # Load the LTM configuration
  if [[ -f $ltm_cfg ]]; then
    if [[ check_do_status ]]; then
      echo "$(date +%T) Vlans found, system is ready for ltm configuration"
      tmsh load sys config file $ltm_cfg merge verify >/dev/null 2>&1

      if [[ $? == 0 ]]; then
        echo "$(date +%T) LTM config verify successful; loading LTM configuration"
        tmsh load sys config file $ltm_cfg merge >/dev/null 2>&1
      else
        echo "$(date +%T) LTM config verify encountered errors; not loading ltm configuration"
      fi

    else
      echo "$(date +%T) ERROR: Vlans not found, probable DO config failure"
      echo "$(data +%T) System state is active but no vlans are present"
    fi
  fi

  # Save the configuration
  echo "$(date +%T) Saving configuration"
  tmsh save sys config
}


## If BIG-IQ licensing was used we should release it on shutdown 
## Create systemd service to release the license on shutdown and relicense on boot
mk_system_licensing() {
  if [[ $use_bigiq_license == 1 ]]; then
    # create license revocation script in /etc/init.d and symlink to rc scripts
    if [[ -n $lic_update_b64 ]]; then echo $lic_update_b64 | base64 -d > $lic_update; fi
    if [[ -n $update_license_b64 ]]; then echo $update_license_b64 | base64 -d > $update_license; fi
  
    chmod 755 $lic_update
    cp $lic_update /etc/init.d
  
    # create systemd service
    cp $update_license /etc/systemd/system/
    systemctl daemon-reload
    systemctl enable f5_update_license
    systemctl start f5_update_license
  fi  
}


## Disable syslog logging to console
disable_syslog_console() {
  # update syslog-ng to stop logging to the console
  # NOTE: This isn't actually necessary, but console logging is really disruptive, so...
  echo "$(date +%T) Redirectong console log messages to /var/log/console.log"
  sed -i -e 's/usertty(\"\*\")/file("\/var\/log\/console.log")/' /var/run/config/syslog-ng.conf
  tmsh restart sys service syslog-ng
}

### /Functions


###
### Begin Main
### 
# wait for bigip to become ready for configuration
sleep 60
wait_bigip_ready

# onboard and cloud configuration working directory
mkdir -p $cfg_dir
mkdir -p $rpms_dir
ln -s $cfg_dir /home/$admin_user/ 2>/dev/null

## * Update STDOUT and STDERR
LOG_FILE="$cfg_dir/$cloud_init_log"
if [[ ! -e $LOG_FILE ]]; then
  touch $LOG_FILE
  exec &>>$LOG_FILE
else
  #if file exists, exit as only want to run once
  exit
fi
exec 1>$LOG_FILE 2>&1

# copy onboard script $cfg_dir for ease of review
echo "$(date +%T) cp $0 $cfg_dir/cloud_init_script.bash && chmod 755 $cfg_dir/cloud_init_script.bash"
cp $0 $cfg_dir/cloud_init_script.bash && chmod 755 $cfg_dir/cloud_init_script.bash

# Enable debug output
if [[ $DEBUG > 0 ]]; then set -x; fi

# Update ${admin_user} password to allow REST calls and GUI access
echo "$(date +%T) Updating $admin_user password"
tmsh modify auth user $admin_user password "$admin_password"

# Get metadata information
metadata=$(curl -sH Metadata:true $metadataUrl)
subscription_id=$(echo $metadata | jq -r .compute.subscriptionId)
resource_group=$(echo $metadata  | jq -r .compute.resourceId)
vm_scale_set=$(echo $metadata      | jq -r .compute.vmScaleSetName)
resource_id=$(echo $metadata     | jq -r .compute.resourceId)
instance_id=$(basename $resource_id)

# Get the auth header for storage and API access
get_mgmt_auth_header
get_storage_auth_header

# Get Azure self-ip
get_self_ip

# retrieve the bigip.conf from storage container or https location
get_bigip_config

# retrieve iApp packages from storage container or https location
get_iapp_pkgs

# Install iApp pkgs
install_iapp_pkgs

# decode iApp pkg configuration and write to file
mk_iapp_json

# Submit DO, TS, and AS3 declarations
submit_declarative_onboarding
test -f $ts_cfg  && { submit_telemetry_streaming; }
test -f $as3_cfg && { submit_as3; }

# Merge initial bigip.conf into running configuration
load_ltm_config

# Create systemd licensing service
mk_system_licensing

# disable console logging from syslog
disable_syslog_console


# all done
exit 0


# set vim: set syntax=sh tabstop=2 expandtab:
